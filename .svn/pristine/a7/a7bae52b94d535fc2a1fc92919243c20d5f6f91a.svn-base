package com.sitemap.locationgather.activity;

import android.Manifest;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.WindowManager;
import android.widget.ImageView;

import com.sitemap.locationgather.R;
import com.sitemap.locationgather.application.MyApplication;
import com.sitemap.locationgather.config.RequestCode;
import com.sitemap.locationgather.http.HttpUtil;
import com.sitemap.locationgather.util.MacUtils;
import com.sitemap.locationgather.util.ToastUtil;

import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.ViewInject;

/**
 * 启动页面
 */
@ContentView(R.layout.activity_splash)
public class SplashActivity extends BaseActivity implements Runnable {
    private SplashActivity mContext;//本类
    private static String[] PERMISSIONS_STORAGE = {
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_PHONE_STATE
    };
    private HttpUtil http;//网络请求
    private Bitmap bt = null;//加载图片类
    @ViewInject(R.id.img)
    private ImageView img;

    @Override
    protected void initData() {
        mContext = this;
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);//影藏系统状态栏
        if (http == null) {
            http = new HttpUtil(handler);
        }
        MyApplication.diverID = MacUtils.getMacAddr();
//        if (bt == null) {
//            BitmapFactory.Options options = new BitmapFactory.Options();
//            bt = BitmapFactory.decodeResource(getResources(), R.drawable.splash,options);
//        }
//        img.setImageBitmap(bt);
        handler.postDelayed(this, 3000);
    }

    @SuppressLint("HandlerLeak")
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    Intent intent = new Intent(mContext,MainActivity.class);
                    startActivity(intent);
                    mContext.finish();
                    break;
                default:
                    break;
            }
        }
    };

    /**
     * 改写物理按键——返回的逻辑
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            handler.removeCallbacks(this);
            mContext.finish();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        handler.removeCallbacks(this);
        if (bt != null) {
            //释放图片内存
            bt.recycle();
            bt = null;
        }
        //强制回收
        System.gc();
    }

    @Override
    public void run() {
        handler.sendEmptyMessage(1);
        MyApplication.diverID = MacUtils.getMacAddr();
//        if (Build.VERSION.SDK_INT >= 23) {//动态获取权限
//            getPermission(this);
//        }else{//不需要获取权限就直接请求
//            MyApplication.diverID = MacUtils.getMacAddr();
//            handler.sendEmptyMessage(1);
//        }
    }

    @TargetApi(23)
    private void getPermission(Activity context) {
        int permission = ActivityCompat.checkSelfPermission(context,
                Manifest.permission.READ_PHONE_STATE);
        if (permission != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(context, PERMISSIONS_STORAGE, 1);
        }else{//已经获取了权限
            MyApplication.diverID = MacUtils.getMacAddr();
            handler.sendEmptyMessage(1);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == 1) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                //请求权限成功,做相应的事情
                MyApplication.diverID = MacUtils.getMacAddr();
                handler.sendEmptyMessage(1);
            } else {
                //请求失败则提醒用户
                ToastUtil.showBottomShort(mContext,"请求权限失败！");
                mContext.finish();
            }
        }
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }
}
